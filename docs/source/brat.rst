Brat
----

.. _Brat: https://brat.nlplab.org/standoff.html

`Brat`_ is an open source text annotation tool.
This package provides a Brat adapter to generate Brat annotation files (.ann extension)
in order to visualise iamsystem's annotations in the Brat web interface.

Brat Formatter
^^^^^^^^^^^^^^

Given a sequence of tokens, there are several ways of creating a Brat annotation.
The default Brat formatter groups continuous sequence of tokens:

.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_default_formatter
    :end-before: # end_test_brat_default_formatter

Although "North America" has two tokens, "North" and "America", a continuous Brat annotation (0 13) is created.

In order to have one Brat span for each token, you can use the :ref:`api_doc:TokenFormatter`:

.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_individual_formatter
    :end-before: # end_test_brat_individual_formatter

If you have stopwords in your matching sequences, you can include them in the Brat annotation using
:ref:`api_doc:ContSeqStopFormatter`.
Stopwords are included if and only if they form a continuous sequence of tokens.
Check the differences:

.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_tokenstop_formatter
    :end-before: # end_test_brat_tokenstop_formatter

If your match is a discontinuous sequence of tokens and you want a **continuous Brat annotation** from the start offsets of
the first token and end offsets of the last token, you can use the :ref:`api_doc:SpanFormatter`.
Check the differences:

.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_span_formatter
    :end-before: # end_test_brat_span_formatter




Brat Document
^^^^^^^^^^^^^

The class :ref:`api_doc:BratDocument` can store **Brat entities** and **Brat notes**.
Each entity corresponds to an annotation:

- An ID
- A Brat type declared in Brat's configuration file (annotation.conf)
- start-end offsets
- text substring


.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_document
    :end-before: # end_test_brat_document


The first line is the brat entity, the second is the brat note. T1 is the ID of the brat entity.
Each note is linked to a brat entity by its ID, here T1.
In the brat note, 'North America (NA)' is the comment related to this entity.
By default, this comment is generated by calling the *__str__* method of the :ref:`api_doc:Keyword`.
Here the __str__ method of the :ref:`api_doc:Entity` class concatenated the label 'North America' and the code '(NA)'.
You can modify this last value by overriding the *get_note* function of the :ref:`api_doc:BratDocument` class.

Also note that in the above example, the Brat type "CONTINENT" is passed as a parameter and
applies to all annotations.
If you have multiple Brat types, a better way to do this is to store the Brat type
in a :ref:`api_doc:Keyword` subclass attribute and to pass the attribute name to the *add_annots* function:

.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_doc_keyword
    :end-before: # end_test_brat_doc_keyword

Brat Writer
^^^^^^^^^^^

This package provides an utility class to write a :ref:`api_doc:BratDocument`.

.. literalinclude:: ../../tests/test_doc.py
    :language: python
    :dedent:
    :linenos:
    :start-after: # start_test_brat_writer
    :end-before: # end_test_brat_writer
